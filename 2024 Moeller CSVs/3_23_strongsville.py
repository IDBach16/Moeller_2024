# -*- coding: utf-8 -*-
"""3.23 Strongsville.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14gfwtTlDLI89nqS5G4Umyo_64NEHqhnP
"""

import os

import pandas as pd
df = pd.read_csv('drive/My Drive/3.23 Strongsville.csv')

df.head()

filtered_df = df[(df['Balls'] == 1) & (df['Strikes'] == 0) & (df['BatterTeam'] == 'Moeller')]
strike_looking_count = filtered_df[filtered_df['PitchResult'] == 'Strike Looking'].shape[0]
total_count = filtered_df.shape[0]

percentage_strike_looking = (strike_looking_count / total_count) * 100

filtered_df.shape

strike_swinging_count = filtered_df[filtered_df['PitchResult'] == 'Strike Swing and Miss'].shape[0]
strike_foul_count = filtered_df[filtered_df['PitchResult'] == 'Strike Foul'].shape[0]
strike_inplay_count = filtered_df[filtered_df['PitchResult'] == 'Strike In Play'].shape[0]
ball_count = filtered_df[filtered_df['PitchResult'] == 'Ball'].shape[0]
hit_count = filtered_df[filtered_df['AtBatResult'].isin(['1B', '2B', '3B', 'HR'])].shape[0]

percentage_strike_swinging = (strike_swinging_count / total_count) * 100
percentage_strike_foul = (strike_foul_count / total_count) * 100
percentage_strike_inplay = (strike_inplay_count / total_count) * 100
percentage_ball = (ball_count / total_count) * 100
percentage_hit = (hit_count / total_count) * 100

import matplotlib.pyplot as plt

categories = ['Strike Swinging', 'Strike Foul', 'Strike In Play', 'Strike Looking', 'Ball', 'Hit']
counts = [percentage_strike_swinging, percentage_strike_foul, percentage_strike_inplay, percentage_strike_looking, percentage_ball, percentage_hit]

plt.figure(figsize=(10,6))
plt.bar(categories, counts, color=['navy', 'gold', 'navy', 'gold', 'navy', 'gold'])

for i in range(len(categories)):
    plt.text(categories[i], counts[i], f'{counts[i]:.2f}%', ha='center', va='bottom')

plt.xlabel('Outcome')
plt.ylabel('%')
plt.title('1-0 Count Outcome % 3.11-3.20 Scrimmages')
plt.show()

df['PitchResult'].unique()

strike_events = ['Strike Looking', 'Strike Swing and Miss', 'Strike Foul']
df['is_strike'] = 0
df.loc[df['PitchResult'].isin(strike_events), 'is_strike'] = 1

df['is_moeller_pitcher'] = 0
df.loc[(df['PitcherTeam']=='Moeller'), 'is_moeller_pitcher'] = 1

df1 = df.loc[df['is_moeller_pitcher']==1, ['Pitcher', 'PitchType', 'is_strike']].groupby(['Pitcher', 'PitchType'], as_index=True).mean()
df1 = df1.rename(columns={'is_strike':'Strike%'})
df2 = df.loc[df['is_moeller_pitcher']==1, ['Pitcher', 'PitchType', 'is_strike']].groupby(['Pitcher', 'PitchType'], as_index=True).count()
df2 = df2.rename(columns={'is_strike':'Count'})
df3 = df1.merge(df2, on=['Pitcher', 'PitchType'])

df3

import seaborn as sns
import matplotlib.ticker as ticker

for pitcher in df3['Pitcher'].unique():
  print(pitcher)
  df_plt = df3.loc[df3['Pitcher']==pitcher]
  sns.barplot(data=df_plt, x='Strike%', y='PitchType')

#only use of AI
  ax = plt.gca()
  ax.xaxis.set_major_formatter(ticker.PercentFormatter(xmax=1))

  plt.title('Strike Percentage by Pitch Type for ' + pitcher)
  plt.show()

offspeed = df[(df['PitchType'].isin(['Change Up', 'Breaking Ball'])) & (df['BatterTeam'] == 'Moeller')]
offspeed.head()

offstrike_swinging_count = offspeed[offspeed['PitchResult'] == 'Strike Swing and Miss'].shape[0]
offstrike_looking_count = offspeed[offspeed['PitchResult'] == 'Strike Looking'].shape[0]
offstrike_foul_count = offspeed[offspeed['PitchResult'] == 'Strike Foul'].shape[0]
offstrike_inplay_count = offspeed[offspeed['PitchResult'] == 'Strike In Play'].shape[0]
offball_count = offspeed[offspeed['PitchResult'] == 'Ball'].shape[0]
offhit_count = offspeed[offspeed['AtBatResult'].isin(['1B', '2B', '3B', 'HR'])].shape[0]

offpercentage_strike_swinging = (offstrike_swinging_count / total_count) * 100
offpercentage_strike_looking = (offstrike_looking_count / total_count) * 100
offpercentage_strike_foul = (offstrike_foul_count / total_count) * 100
offpercentage_strike_inplay = (offstrike_inplay_count / total_count) * 100
offpercentage_ball = (offball_count / total_count) * 100
offpercentage_hit = (offhit_count / total_count) * 100

import matplotlib.pyplot as plt

categories = ['Strike Swinging', 'Strike Foul', 'Strike In Play', 'Strike Looking', 'Ball', 'Hit']
counts = [offpercentage_strike_swinging, offpercentage_strike_foul, offpercentage_strike_inplay, offpercentage_strike_looking, offpercentage_ball, offpercentage_hit]

plt.figure(figsize=(10,6))
plt.bar(categories, counts, color=['navy', 'gold', 'navy', 'gold', 'navy', 'gold'])

for i in range(len(categories)):
    plt.text(categories[i], counts[i], f'{counts[i]:.2f}%', ha='center', va='bottom')

plt.xlabel('Outcome')
plt.ylabel('%')
plt.title('Breaking Ball/Changeup Outcome % 3.11-3.20 Scrimmages')
plt.show()

df4 = df.loc[df['is_moeller_pitcher']==1, ['Pitcher', 'AttackZone', 'is_strike']].groupby(['Pitcher', 'AttackZone'], as_index=True).mean()
df4 = df4.rename(columns={'is_strike':'Strike%'})
df5 = df.loc[df['is_moeller_pitcher']==1, ['Pitcher', 'AttackZone', 'is_strike']].groupby(['Pitcher', 'AttackZone'], as_index=True).count()
df5 = df5.rename(columns={'is_strike':'Count'})
df_attack = df4.merge(df5, on=['Pitcher', 'AttackZone'])
df_attack

for pitcher in df_attack['Pitcher'].unique():
  print(pitcher)
  df_plt = df_attack.loc[df_attack['Pitcher']==pitcher]
  sns.barplot(data=df_plt, x='Strike%', y='AttackZone')

  ax = plt.gca()
  ax.xaxis.set_major_formatter(ticker.PercentFormatter(xmax=1))

  plt.title('Strike Percentage by Attack Zone for ' + pitcher)
  plt.show()
